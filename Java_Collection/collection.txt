Collection(interface) 
        |_ List(interface)
        |_ Set(interface)
        |_ Queue(interface)

    Methods - 
    add()
    size()
    remove()
    iterator()
    addAll()  - adds all the elements of a specified collection to the collection
    removeAll()
    clear()

List(interface) (import java.util.List)
        |_ ArrayList(class)  -- dynamic | resizable arrays
        |_ LinkedList(class)
        |_ Vector(class)
            |_Stack(class)

How to use List interface 

// ArrayList implementation of List
List<String> list1 = new ArrayList<>(); - list1 is object of ArrayList which can use functionalities of list interface
#ArrayList
    Arrays.asList(arr) - convert array to arraylist 

// LinkedList implementation of List
List<String> list2 = new LinkedList<>();      

    Methods
    |
    add()  - adds an element to list 
    addAll() - add all elements of list to another list
    get() - randomly acces elements from list 
    iterator() - return iterator object 
    set() - changes elements of list 
    remove() 
    removeAll() 
    clear() -- // more efficient than removeAll
    size() 

    toArray() - converts a list to an array 
    contains() - return boolean

    add(pos,”element”)
    addFirst()
    addLast()
    removeFirst()
    removeLast()

//vector implementation of list

- resizable arrays similar to ArrayList class 
- The Vector class synchronizes each individual operation.
  This means whenever we want to perform some operation on vectors, the Vector class automatically applies a lock to that operation.


Queue(interface)- import java.util.Queue |Queue DS
                |_ ArrayDeque(class)
                |_ LinkedList(Class)
                |_ PriorityQueue(Class)

The Queue interface is also extended by various subinterfaces:
* Deque 
* BlockingQueue 
* BlockingDeque

First in first out manner 
elements added form end(rear) and inserted from front 

mthods of queue interface :
        add() - if successfull retun true else error
        offer() - same as add() return true if successfull else fasle
        element() - return head of queue, throw exception if empty
        peek() - same as element() return head and null if empty
        remove() - remove from head,throw exception if empty
        poll()-same as reomve() , return null if queue empty

#PriorityQueue - class provides the functionality of the heap DS. 
        Unlike normal queues, priority queue elements are retrieved in sorted order.
        Suppose, we want to retrieve elements in the ascending order. In this case, the head of the priority queue will be the smallest element. Once this element is retrieved, the next smallest element will be the head of the queue.
        It is important to note that the elements of a priority queue may not be sorted. However, elements are always retrieved in sorted order.

#Deque(Interface)- The deque interface of the java collection framework provides the functionality of a double-ended queue. It extends the queue interface.
  ArrayDeque(class)+LinkedList(Class) implements deque
    import java.util.Deque

    // Array implementation of Deque
    Deque<String> animal1  = new ArrayDeque<>();

    //Linkedlist implementaion of deque
    Deque<String> animal2 = new LinkedList<>();

Methods of Deque : 

    addFirst() - throw exception if deque full
    addLast()  - throw exception if deque empty
    offerFirst() - same as addFirst return null
    offerLast()
    getFirst()
    getLast()
    peekFirst()
    peekLast()
    removeFirst()
    removeLast()
    pollFirst()
    pollLast()

LinkedList 
syntax 
    LinkedList<Type> linkedList = new LinkedList<>();


Map (interface)| stores in key value pair |key alwasys unique
            |_ HashMap (class)
            |_ EnumMap (class)
            |_ LinkedHashMap(class)
            |_ WeakHashMap(class)
            |_ TreeMap(class)

            ^
            | - SortedMap(interface)
            | - NavigableMap(nterface)
            | - ConcurrentMap


Note: The map interface maintain 3 different sets:
    * the set of keys
    * the set of values
    * the set of key/value associations (mapping).
    hence we can access keys, values and associations individually

import java.util.Map
Map<key,Value> numbers = new HashMap<>();

Methods of map interface

put(K,V) 
putAll()-enter from one map to other
putifAbsent(K,V)
get(K)- return value associated with key. Return null if key not found
getOrDefalut(K,defaultValue)- return default value if not found key
containsKey(K)
containsValue(V)
replace(K,V)
replace(K,oldValue,newValue)
remove(K)
remove(K,V)
keySet() - returns a set of all the  keys present in a map
values()- returns a set of all the values present i na map
entrySet()- returns set of key/value mapping present in a map

#HashMap | provides the functionality of hash table DS

    clear()	removes all mappings from the HashMap
    compute()	computes a new value for the specified key
    computeIfAbsent()	computes value if a mapping for the key is not present
    computeIfPresent()	computes a value for mapping if the key is present
    merge()	merges the specified mapping to the HashMap
    clone()	makes the copy of the HashMap
    containsKey()	checks if the specified key is present in Hashmap
    containsValue()	checks if Hashmap contains the specified value
    size()	returns the number of items in HashMap
    isEmpty()	checks if the Hashmap is empty

#LinkedHashMap - provides the hash table and linked list implementation of the Map interface.
The LinkedHashMap interface extends the HashMap class to store its entries in a hash table. It internally maintains a doubly-linked list among all of its entries to order its entries.
By default,

the capacity of the linked hashmap will be 16
the load factor will be 0.75

 The LinkedHashMap class also allows us to define the order of its entries. For example
 LinkedHashMap<Key, Value> numbers2 = new LinkedHashMap<>(capacity, loadFactor, accessOrder);

Here, accessOrder is a boolean value. Its default value is false. In this case entries in the linked hashmap are ordered on the basis of their insertion order.

However, if true is passed as accessOrder, entries in the linked hashmap will be ordered from least-recently accessed to most-recently accessed.
put()
putAll()
putIfAbsent()
entrySet() - key/value pair
keySet() - set of keys
values() - set of values
get() - Returns the value associated with the specified key. If the key is not found, it returns null.
getOrDefault() - Returns the value associated with the specified key. If the key is not found, it returns the specified default value.
remove(key)
remove(key, value) - removes the entry from the map only if the specified key mapped to be the specified value and return a boolean value
clear()	
containsKey()	
containsValue()	
size()	
isEmpty()	


Set(Interface)|
            |_ HashSet(Class)
            |_ LinkedHashSet(Class)
            |_ EnumSet(Class)
            |_ TreeSet(Class)

            ^
            |_ SorteSet(Interface)
            |_ NavigableSet(Interface)

Some of the commonly used methods of the Collection interface that's also available in the Set interface are:

add() - adds the specified element to the set
addAll() - adds all the elements of the specified collection to the set
iterator() - returns an iterator that can be used to access elements of the set sequentially
remove() - removes the specified element from the set
removeAll() - removes all the elements from the set that is present in another specified set
retainAll() - retains all the elements in the set that are also present in another specified set
clear() - removes all the elements from the set
size() - returns the length (number of elements) of the set
toArray() - returns an array containing all the elements of the set
contains() - returns true if the set contains the specified element
containsAll() - returns true if the set contains all the elements of the specified collection
hashCode() - returns a hash code value (address of the element in the set)


Set Operations
The Java Set interface allows us to perform basic mathematical set operations like union, intersection, and subset.

Union - to get the union of two sets x and y, we can use x.addAll(y)
Intersection - to get the intersection of two sets x and y, we can use x.retainAll(y)
Subset - to check if x is a subset of y, we can use y.containsAll(x)

#HashSet 
By default,
the capacity of the hash set will be 16
the load factor will be 0.75
Method	Description
clone()	Creates a copy of the HashSet
contains()	Searches the HashSet for the specified element and returns a boolean result
isEmpty()	Checks if the HashSet is empty
size()	Returns the size of the HashSet
clear()	Removes all the elements from the HashSet


======================================================

Java Algorithms

1. Sorting using sort()
2. Shuffling Using shuffel()
3. Searching using Binary Search()
4. frequency()
5. disjoint()
6. min()
7. max()